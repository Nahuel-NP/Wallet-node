datasource db {
  provider = "postgresql" // Puedes cambiar a MySQL u otro soporte por Prisma
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  emailValidated Boolean       @default(false)
  isActive       Boolean       @default(true)
  password       String
  wallet         Wallet?
  logs           SecurityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Wallet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  cvu       String   @unique
  alias     String
  balance   Decimal  @db.Decimal(18, 2)
  currency  String
  version   Int      @default(1) // Para Optimistic Locking
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionsSent     Transaction[] @relation(name: "SentTransactions")
  transactionsReceived Transaction[] @relation(name: "ReceivedTransactions")
}

model Transaction {
  id               String      @id @default(uuid())
  senderWallet     Wallet?     @relation(name: "SentTransactions", fields: [senderWalletId], references: [id])
  senderWalletId   String?
  receiverWallet   Wallet?      @relation(name: "ReceivedTransactions", fields: [receiverWalletId], references: [id])
  receiverWalletId String?
  transactionType  String // Ej: 'deposit', 'withdrawal', 'transfer'
  amount           Decimal     @db.Decimal(18, 2)
  status           String // Ej: 'pending', 'completed', 'failed'
  transactionId    String      @unique // Para evitar double-spending
  operations       Operation[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Operation {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  amount        Decimal     @db.Decimal(18, 2)
  operationType String // Ej: 'debit', 'credit', 'fee'
  createdAt     DateTime    @default(now())
}

model SecurityLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String // Ej: 'login', 'failed_transaction', 'password_change'
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
}
